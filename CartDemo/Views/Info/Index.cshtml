<div id="app" class="container">
    <div>
        <b-card no-body>
            <b-tabs content-class="mt-3" fill v-model="tabIndex">
                <b-tab title="商品列表" active>
                    <div v-if="loading" class="d-flex align-items-center justify-content-center m-5" >
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                    <div class="row d-flex justify-content-between  mb-3" v-else>
                        <div class="col-2 d-flex align-items-center flex-column justify-content-between"
                             v-for="item in allProduct" :key="item.productId">
                            <p class="mt-3 mb-0">{{ item.productName }}</p>
                            <img :src="item.image" alt="" style="width: 120px; height: 120px;">
                            <p style="margin: 5px 0px;">NT {{ item.price.toLocaleString() }}</p>
                            <input type="number" min="1" v-model="item.currentNumber" style="width: 80px;">
                            <button class="btn btn-outline-primary mt-2" v-on:click="addProductToCart(item)">加入購物車</button>
                        </div>
                    </div>
                </b-tab>
                <b-tab title="購物車">
                    <div v-if="shoppingCartList.length == 0" class="d-flex align-items-center flex-column justify-content-center m-5">
                        <img src="https://res.cloudinary.com/ditncduk1/image/upload/v1634886133/Blogger/evzfcaqrzw2bgpwshlij.png" alt="" style="height: 80px; width: 80px;">
                        <span style="margin-top: 10px">暫無商品</span>
                    </div>
                    <div class="d-flex" v-if="shoppingCartList.length != 0">
                        <button style="margin-left: auto; margin-right: 20px;" v-on:click="updateProductList()"
                                class="btn btn-outline-primary">
                            {{ edit? '編輯' : '確認' }}
                        </button>
                    </div>
                    <div class="row" v-for="item in shoppingCartList" :key="item.shoppingCartId">
                        <div class="col-12 d-flex justify-content-around align-items-center">
                            <p class="col-4">{{item.productName}}</p>
                            <div class="col-2">
                                <img :src="item.image" alt="" style="width: 70px; height: 70px;">
                            </div>
                            <div class="col-1">
                                <p v-if="edit" class="m-0" style="text-align: left;">{{item.number}}</p>
                                <input type="number" v-else v-model="item.number" style="width: 100%;">
                            </div>
                            <p class="col-2 m-0">NT {{(item.number * item.price).toLocaleString()}}</p>
                            <button class="col-1 btn btn-outline-danger"
                                    v-on:click="deleteShoppingCartElement(item.shoppingCartId)">
                                delete
                            </button>
                        </div>
                    </div>
                    <!-- v-if="shoppingCartList.length != 0" -->
                    <div class="d-flex justify-content-end align-items-center" v-if="shoppingCartList.length != 0">
                        <label for="" style="margin-right: 20px;">
                            抵100優惠券(消費大於500才能使用)
                            <input type="checkbox" :disabled="totalPrice < 500" v-model="coupon">
                        </label>
                        <p class="m-0">總金額：<span>{{ totalPrice }}</span></p>
                        <button style=" margin: 0px 20px;" v-on:click="checkOut()"
                                class="btn btn-outline-primary">
                            前往結帳
                        </button>
                    </div>
                </b-tab>
                <b-tab title="訂單">
                    <b-table :items="orderItems" :fields="orderFields">
                        <template #cell(actions)="row">
                            <b-button size="sm" v-on:click="getOrderInfo(row.item)" class="mr-1" v-b-modal.modal-center-up>
                                訂單詳情
                            </b-button>
                        </template>
                    </b-table>
                    <b-modal id="modal-center-up" centered title="訂單詳情" ref="order-info">
                        <table>
                            <thead>
                                <tr>
                                    <th>商品名稱</th>
                                    <th>商品數量</th>
                                    <th>商品金額(單件)</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr v-for="item in orderDetails">
                                    <td width="50%">{{ item.productName }}</td>
                                    <td width="25%">{{ item.number }}</td>
                                    <td width="25%">NT {{ item.unitPrice }}</td>
                                </tr>
                            </tbody>
                        </table>
                        <template #modal-footer="{ ok }">
                            <b-button size="sm" style="background: #409eff; color: #fff; border: none; padding: 5px 15px;" v-on:click="hideInfo()">
                                確認
                            </b-button>
                        </template>
                    </b-modal>
                </b-tab>
            </b-tabs>
        </b-card>
    </div>
</div>
<script>
    const app = new Vue({
      el: '#app',
      data: {
        urls: {
              getAllProduct: '/api/productwebapi/GetAllProduct',
              addProductToCart: '/api/cartwebapi/AddProductToCart',
              getUserId: '/api/loginwebapi/GetUserId',
              getShoppingCartList: '/api/cartwebapi/GetShoppingCartList',
              deleteShoppingCartElement: '/api/cartwebapi/DeleteShoppingCartElement',
              updateShoppingCartList: '/api/cartwebapi/UpdateShoppingCartList',
              checkOut: '/api/orderwebapi/CheckOut',
              getOrderList: '/api/orderwebapi/GetOrderList',
              getOrderDetail: '/api/orderwebapi/GetOrderDetail'
        },
        loading: false,
        allProduct: [],
        shoppingCartList: [],
        orderList: [],
        orderDetails: [],
        userId: 0,
        tabIndex: 0,
        edit: true,
        totalPrice: 0,
        coupon: false,
        orderItems:[],
        orderFields: [
          { key: 'OrderId', label: '編號'},
          { key: 'OrderTime', label: '訂購時間', class: 'text-center' },
          { key: 'TotalPrice', label: '總額'},
          { key: 'actions', label: '' }
        ],
      },
      methods: {
          getAllProduct() {
          this.loading = true
          axios.get(this.urls.getAllProduct).then(res => {
            this.allProduct = res.data.result.productModels
            this.allProduct.forEach(item => {
              item.currentNumber = 1
            })
              console.log(this.allProduct);
              this.loading = false
          })
        },
        addProductToCart(product) {
          let request = {
            Number: product.currentNumber,
            ProductId: product.productId,
            UserId: 1
          }

          axios.post(this.urls.addProductToCart, request).then(res => {
            console.log(res);
            this.notification('成功加入購物車', 'success')
          })
        },
        getUserId() {
          // let account = window.location.pathname.split('/')[1];
          let account = 'Kevin'
          axios.get(`${this.urls.getUserId}?Account=${account}`).then(res => {
            console.log(res);
            this.userId = res.data.result
          })
        },
        getShoppingCart() {
          axios.get(`${this.urls.getShoppingCartList}?UserId=${this.userId}`).then(res => {
            this.shoppingCartList = res.data.result.shoppingCartModels
            console.log(this.shoppingCartList);
          })
        },
        deleteShoppingCartElement(shoppingCartId) {
          axios.delete(`${this.urls.deleteShoppingCartElement}?ShoppingCartId=${shoppingCartId}`).then(res => {
            console.log(res);
            if (res.data.status == 0) {
              this.notification('刪除成功', 'success')
              this.shoppingCartList = this.shoppingCartList.filter(x => x.shoppingCartId !== shoppingCartId);
            }
          })
        },
        notification(message, type) {
          const Toast = Swal.mixin({
            toast: true,
            position: 'bottom',
            showConfirmButton: false,
            timer: 2000,
          })
          Toast.fire({
            icon: type,
            title: message
          })
        },
        updateProductList() {
          if (!this.edit) {
            let request = {
              SelectShoppingCarts: []
            }
            this.shoppingCartList.forEach(item => {
              let SelectShoppingCart = {
                ShoppingCartId: item.shoppingCartId,
                Number: item.number,

              }
              request.SelectShoppingCarts.push({ ...SelectShoppingCart })
            })
            axios.put(this.urls.updateShoppingCartList, request).then(res => {
              console.log(res);
              this.notification('修改成功', 'success')
            })
          }
          this.edit = !this.edit
        },
        checkOut() {
          let request = {
            UserId: this.userId,
            TotalPrice: this.totalPrice
          }
          axios.post(this.urls.checkOut, request).then(res => {
            console.log(res);
            if (res.data.status == 0) {
              this.notification('新增訂單成功', 'success')
              this.shoppingCartList = []
            }
          })
        },
        getOrderList() {
          axios.get(`${this.urls.getOrderList}?UserId=${this.userId}`).then(res => {

            console.log(res.data.result);

            this.orderList = res.data.result.orders
            console.log(this.orderList);
            this.orderItems = []
            this.orderList.forEach(item => {
              item.orderDate = moment.utc(item.orderDate).local().format('YYYY-MM-DD HH:mm:ss');
              // item.totalPrice =
              console.log(item.orderDate);
              let data = {
                OrderId: item.orderId,
                OrderTime: item.orderDate,
                TotalPrice: item.totalPrice
              }
              this.orderItems.push({...data})
            })
            console.log(this.items);

            console.log(this.orderList)
          })
        },
        getOrderInfo(order){
          console.log(order);
          // 取得單筆訂單詳情
          axios.get(`${this.urls.getOrderDetail}?OrderId=${order.OrderId}`).then(res => {
            console.log(res);
            this.orderDetails = res.data.result.orderDetailModels
          })
        },
        hideInfo() {
            this.$refs['order-info'].hide();
        },
        calculateTotalPrice(){
          if (this.shoppingCartList.length !== 0) {
            let rawPrice = this.shoppingCartList.map(x => x.number * x.price).reduce((a, b) => a + b)
            // 優惠券
            if (rawPrice > 500 && this.coupon){
              rawPrice -= 100
            }
            if (rawPrice < 1000){
              // 運費
              rawPrice += 60
            }
            else if (rawPrice > 3000) {
              rawPrice = Math.round(rawPrice * 0.9)
            }
            this.totalPrice = rawPrice.toLocaleString()
          }
        }
      },
      mounted() {
        this.getUserId();
        this.getAllProduct()
      },
      watch: {
        tabIndex: {
          handler: function (newValue, oldValue) {
            console.log(newValue);

            if (newValue == 1) {
              // 讀此人的購物車
              this.getShoppingCart()
            }
            else if (newValue == 2) {
              this.getOrderList();
            }
          }
        },
        shoppingCartList: {
          deep: true,
          handler: function () {
            this.calculateTotalPrice()
          }
        },
        coupon: {
          handler: function(){
            this.calculateTotalPrice()
          }
        }
      }
    })
</script>